uci = 'https://archive.ics.uci.edu/ml/machine-learning-databases'
autos = '/autos/imports-85.data'
url = paste0(uci, autos)
url
download.file(url = url, destfile = 'imports-85.data')
knitr::opts_chunk$set(echo = TRUE)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
names
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
read.csv(col.names = names, stringsAsFactors = FALSE)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
read.csv('imports-85.data', col.names = names, stringsAsFactors = FALSE)
download.file(url = url, destfile = 'imports-85.data')
ls
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
read.csv('imports-85.data', col.names = names, stringsAsFactors = FALSE)
dat = read.csv('imports-85.data', col.names = names, stringsAsFactors = FALSE)
View(dat)
class(dat$curb_weight)
class(dat)
sapply(dat, class)
library(readr)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
View(dat)
problem()
problems()
problems(read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii'))
setwd(../../../hw/hw01)
setwd('../../../hw/hw01')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
dat = read_csv('imports-85.data', col_names = names, col_types = 'rrcccccccrrrriccicrrriiiii')
data = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
View(data)
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
View(dat)
str(dat)
sapply(dat, class)
read.csv('imports-85.data')
test = read.csv('imports-85.data')
View(test)
View(dat)
test = read.csv('imports-85.data', header = FALSE)
View(test)
sapply(test, class)
object.size(test)
object_size(dat)
object.size(dat)
mat = as.matrix(dat)
View(mat)
class(mat)
sapply(mat, class)
hist(dat$price, col = 'Orange')
hist(dat$price, col = 'Orange', xlab = 'Price')
hist(dat$price, col = 'Orange', xlab = 'Price' main = paste('Histogram of', 'Price))
hist(dat$price, col = 'Orange', xlab = 'Price' main = paste('Histogram of', 'Price'))
hist(dat$price, col = 'Orange', xlab = 'Price' main = 'Histogram of Price')
hist(dat$price, col = 'Orange', xlab = 'Price')
hist(dat$price, col = 'Orange', xlab = 'Price', title = 'Price')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii')
str(dat)
hist(dat$price, col = 'Orange', xlab = 'Price', title = 'Price')
hist(dat$price, col = 'Orange', xlab = 'Price', main = 'Price')
hist(dat$price, col = 'Orange', xlab = 'Price', main = 'Histogram of Price')
boxplot(dat$horsepower, horizontal = TRUE)
boxplot(dat$horsepower, horizontal = TRUE, main = 'Horsepower')
boxplot(dat$horsepower, horizontal = TRUE, main = 'Horsepower', xlab = 'Horsepower')
library(readr)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii', na = c('?'))
str(dat)
barplot(dat[order(data$body_style), decreasing = TRUE])
barplot(dat[order(data$body_style, decreasing = TRUE)])
```{r body style}
dat[order(body_style, decreasing = TRUE)]
dat[order(dat$body_style, decreasing = TRUE)]
barplot(dat$body_style)
barplot(data = dat$body_style)
barplot(dat$body_style)
barplot(dat$body_style)
class(dat$body_style)
bs_data_frame = as.data.frame(bs_table)
bs_table = table(dat$body_style)
bs_data_frame = as.data.frame(bs_table)
View(bs_data_frame)
bs_data_frame = as.data.frame(bs_table)[order('Freq')]
View(bs_data_frame)
bs_data_frame = as.data.frame(bs_table)[order('Freq'), ]
View(bs_data_frame)
bs_data_frame = as.data.frame(bs_table)[, order('Freq')]
bs_data_frame = as.data.frame(bs_table)
View(bs_data_frame)
bs_data_frame = as.data.frame(bs_table)[order(Freq), ]
bs_table = table(dat$body_style)
bs_data_frame = as.data.frame(bs_table)
View(bs_data_frame)
bs_ordered = bs_data_frame[order(Freq)]
bs_ordered = bs_data_frame[order(bs_data_frame$Freq)]
summary(bs_data_frame)
bs_ordered = bs_data_frame[order('Freq'), ]
View(bs_ordered)
bs_ordered = bs_data_frame[order(Freq), ]
bs_ordered = bs_data_frame[order(bs_data_frame$Freq), ]
View(bs_ordered)
bs_ordered = bs_data_frame[order(bs_data_frame$Freq, decreasing = TRUE), ]
barplot(bs_ordered)
barplot(bs_ordered$Freq, names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 1.5, names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 2, names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 2, xlim = 10, names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 2, xlim = 5, names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 2, xlim = c(0, 10), names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 1.5, xlim = c(0, 10), names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 1.8, xlim = c(0, 10), names.arg = bs_ordered$Var1)
barplot(bs_ordered$Freq, width = 1.8, xlim = c(0, 10), ylim = c(0, 120), names.arg = bs_ordered$Var1)
View(dat)
turbo = dat[dat$aspiration == 'turbo', ]
View(turbo)
turbo = dat[dat$aspiration == 'turbo', c('wheel_base', 'length', 'width', 'height', 'price')]
View(turbo)
stars(turbo)
stars(turbo, main = 'Turbo Vehicles')
fuel_type_gas = dat[dat$fuel_type = 'gas', 'fuel_type']
fuel_type_gas = dat[dat$fuel_type == 'gas', 'fuel_type']
View(fuel_type_gas)
gas_price = dat[dat$fuel_type == 'gas', 'fuel_type']
mean(gas_price)
mean(gas_price)
gas_price = dat[dat$fuel_type == 'gas', 'price']
mean(gas_price$)
mean(gas_price)
gas_price = dat[dat$fuel_type == 'gas', 'price']
View(gas_price)
mean(gas_price)
mean(gas_price$price)
gas_price = dat[dat$fuel_type == 'gas' & dat$price != 'NA', 'price']
mean(gas_price$price)
View(gas_price)
gas_price = dat[dat$fuel_type == 'gas' & dat$price != NA, 'price']
mean(gas_price$price)
gas_price = dat[complete.cases(dat[dat$fuel_type == 'gas', 'price'])
View(gas_price)
View(gas_price)
gas_price = dat[complete.cases(dat[dat$fuel_type == 'gas', 'price'])
knitr::opts_chunk$set(echo = TRUE)
library(readr)
names = c('symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')
dat = read_csv('imports-85.data', col_names = names, col_types = 'ddcccccccddddiccicdddiiiii', na = c('?'))
str(dat)
hist(dat$price, col = 'Orange', xlab = 'Price', main = 'Histogram of Price')
boxplot(dat$horsepower, horizontal = TRUE, main = 'Horsepower', xlab = 'Horsepower')
bs_table = table(dat$body_style)
bs_data_frame = as.data.frame(bs_table)
bs_ordered = bs_data_frame[order(bs_data_frame$Freq, decreasing = TRUE), ]
barplot(bs_ordered$Freq, width = 1.8, xlim = c(0, 10), ylim = c(0, 120), names.arg = bs_ordered$Var1)
turbo = dat[dat$aspiration == 'turbo', c('wheel_base', 'length', 'width', 'height', 'price')]
stars(turbo, main = 'Turbo Vehicles')
gas_price = dat[complete.cases(dat[dat$fuel_type == 'gas', 'price'])
mean(gas_price$price)
gas_price = dat[complete.cases(dat[dat$fuel_type == 'gas', 'price'])]
gas_price = dat[dat$fuel_type == 'gas' & !is.na(dat$price), 'price'])]
gas_price = dat[dat$fuel_type == 'gas' & !is.na(dat$price), 'price']
mean(gas_price$price)
View(dat)
dat[dat$num_of_cylinders == 'Twelve', 'make']
dat[dat$num_of_cylinders == 'twelve', 'make']
# c.
diesel = dat[dat$fuel_type == 'diesel', 'make']
View(diesel)
diesel_table = table(diesel$make)
diesel_table
diesel_df = as.data.frame(diesel_table)
View(diesel_df)
diesel_df_ordered = diesel_df[order(diesel_df$Freq), ]
View(diesel_df_ordered)
diesel_df_ordered = diesel_df[order(diesel_df$Freq, decreasing = TRUE), ]
View(diesel_df_ordered)
diesel_df_ordered[1, 'Var1']
diesel_df_ordered$Var1[1]
diesel_df_ordered$Var1[[1]]
diesel_df_ordered$Var1[1]
diesel_df = as.data.frame(diesel_table, stringsAsFactors = FALSE)
diesel_df_ordered = diesel_df[order(diesel_df$Freq, decreasing = TRUE), ]
diesel_df_ordered$Var1[1]
# a.
gas_price = dat[dat$fuel_type == 'gas' & !is.na(dat$price), 'price']
mean(gas_price$price)
# b.
dat[dat$num_of_cylinders == 'twelve', 'make']
# c.
diesel = dat[dat$fuel_type == 'diesel', 'make']
# b.
dat[dat$num_of_cylinders == 'twelve', 'make']
# b.
dat[dat$num_of_cylinders == 'twelve', ]
# b.
dat[dat$num_of_cylinders == 'twelve', 1]
# c.
diesel = dat[dat$fuel_type == 'diesel', 'make']
diesel_table = table(diesel$make)
diesel_df = as.data.frame(diesel_table, stringsAsFactors = FALSE)
diesel_df_ordered = diesel_df[order(diesel_df$Freq, decreasing = TRUE), ]
diesel_df_ordered$Var1[1]
# c.
diesel = dat[dat$fuel_type == 'diesel']
# c.
diesel = dat[dat$fuel_type == 'diesel',]
# b.
test = dat[dat$num_of_cylinders == 'twelve', 1]
View(test)
View(dat)
class(dat$num_of_cylinders)
# b.
test = dat[dat$num_of_cylinders == 'twelve', ]
View(test)
# b.
test = dat[dat$num_of_cylinders == 'twelve', 'make']
View(test)
# b.
dat[dat$num_of_cylinders == 'twelve', 'make'][1]
# b.
dat[dat$num_of_cylinders == 'twelve', 'make']
# b.
twelve_cyl = dat[dat$num_of_cylinders == 'twelve', 'make']
View(twelve_cyl)
twelve_cyl$make[1]
diesel_df_ordered$Var1[1]
# d.
hp_ordered = dat[order(dat$horsepower, decreasing = TRUE), ]
View(hp_ordered)
hp_ordered$price[1]
hp_ordered$price[2]
hp_ordered$price[3]
View(dat)
View(hp_ordered)
hp_ordered$price[1]
# The price for the largest horsepower is missing, so I will check the second highest horsepower.
hp_ordered$price[2]
# e.
quantile(dat$city_mpg, probs = seq(0, 1, by= 0.1))
# e.
quantile(dat$city_mpg, probs = 0.1)
# f.
quantile(dat$highway_mpg, probs = 0.9)
dat$city_mpg <= 17
dat$city_mpg[dat$city_mpg <= 17]
# g.
median(dat[dat$city_mpg <= 17, 'price']['price'])
# g.
price_10th = dat[dat$city_mpg <= 17, 'price']
View(price_10th)
median(price_10th$price)
# g.
price_10th = dat[dat$city_mpg <= 17 & !is.na(dat$price), 'price']
View(price_10th)
median(price_10th$price)
dat4xyz
dat$xyz
mtcars[ ,1]
mtcars[[1]]
mtcars[ ,mpg]
mtcars[["mpg"]]
mtcars$"mpg"
as.list(mtcars)
data.frame(a = list(1, 2, 3),)
data.frame(a = list(1, 2, 3),)
ex = data.frame(a = list(1, 2, 3),
b = c(1, 2, 3)
)
View(ex)
ex
ex = data.frame(a = list(1),
b = c(1, 2, 3)
)
ex
test = as.list(mtcars)
class(test)
test
test(1)
test[1]
class(test[1])
as.data.frame(test)
data.frame(abc = test)
qdat = dat[na.omit(dat), ]
qdat = na.omit(dat)
View(qdat)
correlation = corr(qdat)
correlation = cor(qdat)
qdat = na.omit(dat)[ , c('wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_size', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price')]
View(qdat)
cor(qdat)
correlation = cor(qdat)
View(correlation)
class(correlation)
install.packages("corrplot")
library(corrplot)
# color visualization
corrplot(correlation, method = "color")
# number visualization
corrplot(correlation, method = "number")
pca = prcomp(qdat)
View(pca)
pca
pca = prcomp(qdat, scale. = TRUE)
View(pca)
pca
pca.names
names(pca)
eigenvalues = pca$sdev^2
eigenvalues
eigenframe = data.frame(eigenvalue = eigenvalues,
percentage = (eigenvalues / sum(eigenvalues) * 100)
)
eigenframe
View(eigenframe)
sum(eigenframe$percentage[1:3])
pca
View(pca)
pca[1]
pca[, 1]
pca[1, 1]
pca
summary(pca)
plot(pca)
names(pca)
pca$x
class(pca$x)
plot(pca$x)
plot(pca$x, main = 'PC1 vs. PC2')
plot(pca$x, main = 'PC1 vs. PC2')
View(pca)
names(pca)
View(eigenframe)
plot(pca$sdev^2)
pcs
pca
