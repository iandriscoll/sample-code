die()
library(dieroller)
library(dieroller)
die()
library(dieroller)
roll(die())
roll(die(), 500)
print.roll = function(x) {
cat('object "roll"\n\n')
print(list(rolls = x$rolls))
invisible(x)
}
library(dieroller)
library(dieroller)
die()
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
library(dieroller)
test_that("die() works with ok args", {
expect_known_output(die)
})
expect_equal(class(die(), "die"))
test_that("die() works with ok args", {
expect_equal(class(die()), "die")
})
devtools::test()
devtools::build_vignettes()
test_that("die() works with ok args", {
expect_equal(class(die()), "die")
expect_equal(length(die()$sides), 6)
})
devtools::test()
devtools::test()
test_that("die() errors with invalid args", {
expect_error(die(c(1, 2, 3), c(0.4, 0.2, 0.4)))
expect_error(die(5))
})
devtools::test()
test_that("roll() works with ok args", {
expect_equal(class(roll()), "roll")
expect_equal(length(roll()$rolls), 1)
expect_equal(roll(500)$total, 500)
})
test_that("roll() works with ok args", {
expect_equal(class(roll(die())), "roll")
expect_equal(length(roll(die())$rolls), 1)
expect_equal(roll(die(), 500)$total, 500)
})
devtools::test()
test_that("roll() errors with invalid args", {
expect_error(roll())
expect_error(roll(die()), 5, 2)
expect_error(roll(die(), -1))
})
test_that("roll() errors with invalid args", {
expect_error(roll())
expect_error(roll(die(), 5, 2))
expect_error(roll(die(), -1))
})
devtools::test()
library(dieroller)
devtools::build_vignettes()
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
mydie = die()
library(dieroller)
mydie = die()
View(mydie)
class(mydie)
knitr::opts_chunk$set(echo = TRUE)
library(dieroller)
successes = c(rep(0, 1000))
mydie = die()
successes = c(rep(0, 1000))
for (i in 1:1000) {
a = roll(mydie())
if (length(a$rolls[a$rolls == 6]) > 0) {
successes[i] = 1
}
}
for (i in 1:1000) {
a = roll(mydie)
if (length(a$rolls[a$rolls == 6]) > 0) {
successes[i] = 1
}
}
successes
mydie = die()
successes = c(rep(0, 1000))
for (i in 1:1000) {
a = roll(mydie, times = 4)
if (length(a$rolls[a$rolls == 6]) > 0) {
successes[i] = 1
}
}
successes
sum(successes)
wins = sum(successes)
rel_freq = wins / 1000
rel_freq
mydie2 = die()
View(a)
successes2 = c(rep(0, 1000))
mydie2 = die()
successes2 = c(rep(0, 1000))
for (i in 1:1000) {
x = roll(mydie, 24)
y = roll(mydie, 24)
if (length(x$rolls[x$rolls == 6]) > 0 & length(y$rolls[y$rolls == 6]) > 0) {
successes2[i] = 1
}
}
wins2 = sum(successes2)
mydie2 = die()
successes2 = c(rep(0, 1000))
for (i in 1:1000) {
x = roll(mydie, 24)
y = roll(mydie, 24)
for (k in 1:24) {
if (x$rolls[k] == y$rolls[k] & x$rolls[k] == 6) {
successes2[i] = 1
}
}
}
wins2 = sum(successes2)
rel_freq2 = wins2 / 1000
rel_freq2
install.packages("learnr")
library(learnr)
library(devtools)
devtools::install_github("DataComputing/DataComputing")
