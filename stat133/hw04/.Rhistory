y
}
clean_archive = function(x) {
x = as.data.frame(x)[]
y = x[-c(1, 2, (nrow(x))), ]
a = data.frame(
name = str_extract(y[[2]], "[a-z]+"),
version = str_extract(y[[2]], "[0-9]+.[0-9]{1,2}+.[0-9]{1,2}|[0-9]+.[0-9]{1,2}"),
date = str_extract(y[[3]], "[0-9]{4}+-[0-9]{2}+-[0-9]{2}"),
size =  version_sizes(y[[4]])
)
a
}
clean_archive(read_archive('stringr'))
clean_archive(read_archive('dplyr'))
getwd()
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
View(clean_data)
write.csv(clean_data, "data/stringr-archive.csv")
clean_archive = function(x) {
x = as.data.frame(x)[]
y = x[-c(1, 2, (nrow(x))), ]
a = data.frame(
name = str_extract(y[[2]], "[a-z]+"),
version = str_extract(y[[2]], "[0-9]+.[0-9]{1,2}+.[0-9]{1,2}|[0-9]+.[0-9]{1,2}"),
date = as.Date(str_extract(y[[3]], "[0-9]{4}+-[0-9]{2}+-[0-9]{2}")),
size =  version_sizes(y[[4]])
)
a
}
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
write.csv(clean_data, "data/stringr-archive.csv")
View(clean_data)
clean_data[4]
clean_data[3]
class(clean_data[3])
class(clean_data$data)
class(clean_data$date)
plot_archive = function(archive) {
return(ggplot() +
geom_step(aes(x = archive$date, y = archive$size)))
}
plot_archive(clean_data)
plot_archive = function(archive) {
return(ggplot() +
geom_step(aes(x = archive$date, y = archive$size)) +
ggtitle(paste0(archive$name[1], ": timeline of version sizes")))
}
plot_archive(clean_data)
source('code/archive-functions.csv')
source('code/archive-functions.R')
source('code/archive-functions.R')
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
plot_archive(clean_data)
raw_gg = read_archive('ggplot2')
clean_gg = clean_archive(raw_gg)
View(clean_gg)
write.csv(clean_gg, "data/ggplot2-archive.csv")
#XML
raw_xml = read_archive('XML')
#XML
raw_xml = read_archive('XML')
clean_xml = clean_archive(raw_xml)
write.csv(clean_xml, "data/XML-archive.csv")
View(clean_xml)
#knitr
raw_knitr = read_archive('knitr')
write.csv(clean_knitr, "data/knitr-archive.csv")
clean_knitr = clean_archive(raw_knitr)
write.csv(clean_knitr, "data/knitr-archive.csv")
#dplyr
raw_dplyr = read_archive('dplyr')
clean_dplyr = clean_archive(raw_dplyr)
write.csv(clean_dplyr, "data/dplyr-archive.csv")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, colour = clean_dplyr)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, colour = clean_knitr)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, colour = clean_gg)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, colour = clean_xml)) +
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, colour = clean_dplyr)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, colour = clean_knitr)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, colour = clean_gg)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, colour = clean_xml))
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size))
ggplot(aes(color = color)) +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size))
ggplot(aes(col = 1:4)) +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size))
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 1)) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 2)) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 3)) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 4))
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML'))
ggplot(aes(xlab = 'date', ylab = "Size (Kilobytes")) +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML'))
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers") +
ggtitle("Packages and their sizes")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes") + facet_grid(x~.)
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes") + facet_grid()
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes") + facet_grid(name)
rbind(c(clean_dplyr, clean_gg, clean_knitr, clean_xml))
all_together = rbind(c(clean_dplyr, clean_gg, clean_knitr, clean_xml))
View(all_together)
all_together = as.data.frame(rbind(c(clean_dplyr, clean_gg, clean_knitr, clean_xml)))
View(all_together)
all_together = unlist(rbind(c(clean_dplyr, clean_gg, clean_knitr, clean_xml)))
all_together = rbind(clean_dplyr, clean_gg, clean_knitr, clean_xml)
View(all_together)
ggplot() + geom_step(aes(x = all_together$name, y = all_together$size))
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size))
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_wrap(~ name)
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_wrap(~ 'name')
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_wrap(~ name)
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_wrap(~name)
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_wrap(~ name, scales = "free")
View(all_together)
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size))
ggplot() + geom_step(aes(x = all_together$date, y = all_together$size)) + facet_grid(name ~.)
ggplot() + geom_step(aes(x = date, y = size)) + facet_grid(name ~.)
ggplot(all_together) + geom_step(aes(x = date, y = size)) + facet_grid(name ~.)
ggplot(all_together) + geom_step(aes(x = date, y = size)) + facet_grid(name ~., scales = "free")
ggplot(all_together) + geom_step(aes(x = date, y = size)) + facet_wrap(name ~., scales = "free")
ggplot(all_together) + geom_step(aes(x = date, y = size)) + facet_wrap(~name, scales = "free")
ggplot(all_together) + geom_step(aes(x = date, y = size, col = 1:4)) + facet_wrap(~name, scales = "free")
ggplot(all_together) + geom_step(aes(x = date, y = size, col = name)) + facet_wrap(~name, scales = "free")
source('code/regex-functions.R')
split_chars('Go Bears!')
split_chars("Expecto Patronum")
vec = c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels('The quick brown fox jumps over the lazy dog')
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words("sentence! this reverse")
reverse_words("string")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes")
ggplot(all_together) + geom_step(aes(x = date, y = size, col = name)) + facet_wrap(~name, scales = "free")
library(ggplot2)
library(ggplot2)
library(XML)
library(stringr)
library(ggplot2)
read_archive = function(x) {
url = paste0("http://cran.r-project.org/src/contrib/Archive/", x)
readHTMLTable(url)
}
version_sizes = function(x) {
x = as.character(x)
y = c(rep(0, length(x)))
for (i in 1:length(x)) {
if (!is.na(str_extract(x[i], "K"))) {
y[i] = as.numeric(substr(x[i], 1, nchar(x[i]) - 1))
} else {
y[i] = as.numeric(substr(x[i], 1, nchar(x[i]) - 1)) * 1000
}
}
y
}
clean_archive = function(x) {
x = as.data.frame(x)[]
y = x[-c(1, 2, (nrow(x))), ]
a = data.frame(
name = str_extract(y[[2]], "[a-z]+"),
version = str_extract(y[[2]], "[0-9]+.[0-9]{1,2}+.[0-9]{1,2}|[0-9]+.[0-9]{1,2}"),
date = as.Date(str_extract(y[[3]], "[0-9]{4}+-[0-9]{2}+-[0-9]{2}")),
size =  version_sizes(y[[4]])
)
a
}
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
write.csv(clean_data, "data/stringr-archive.csv")
plot_archive = function(archive) {
return(ggplot() +
geom_step(aes(x = archive$date, y = archive$size)) +
ggtitle(paste0(archive$name[1], ": timeline of version sizes")))
}
plot_archive(clean_data)
# 2.1
library(dplyr)
library(stringr)
split_chars = function(x) {
a = str_split(x, pattern = '')
return(unlist(a))
}
split_chars('Go Bears!')
# 2.2
num_vowels = function(x) {
vowels <- c('a', 'e', 'i', 'o', 'u')
x = c(x, vowels)
x = x[x %in% vowels]
table(x) - 1
}
num_vowels(split_chars("Go Bears!"))
# 2.3
count_vowels = function(x) {
a = split_chars((tolower(x)))
return(num_vowels(a))
}
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars = function(x) {
a = split_chars(x)
a = rev(a)
x = a[1]
for (i in 2:length(a)) {
x = paste0(x, a[i])
}
return(x)
}
reverse_chars("Lumox Maxima")
reverse_words = function(x) {
a = unlist(str_split(x, pattern = ' '))
a = rev(a)
x = a[1]
if (length(a) == 1) {
return(x)
}
for (i in 2:length(a)) {
x = paste(x, a[i], sep = " ")
}
return(x)
}
reverse_words("sentence! this reverse")
reverse_words("string")
knitr::opts_chunk$set(echo = TRUE)
source('code/archive-functions.R')
library(ggplot2)
library(stringr)
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
plot_archive(clean_data)
#ggplot2
raw_gg = read_archive('ggplot2')
clean_gg = clean_archive(raw_gg)
write.csv(clean_gg, "data/ggplot2-archive.csv")
#XML
raw_xml = read_archive('XML')
clean_xml = clean_archive(raw_xml)
write.csv(clean_xml, "data/XML-archive.csv")
#knitr
raw_knitr = read_archive('knitr')
clean_knitr = clean_archive(raw_knitr)
write.csv(clean_knitr, "data/knitr-archive.csv")
#dplyr
raw_dplyr = read_archive('dplyr')
clean_dplyr = clean_archive(raw_dplyr)
write.csv(clean_dplyr, "data/dplyr-archive.csv")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes")
all_together = rbind(clean_dplyr, clean_gg, clean_knitr, clean_xml)
ggplot(all_together) + geom_step(aes(x = date, y = size, col = name)) + facet_wrap(~name, scales = "free")
source('code/regex-functions.R')
split_chars('Go Bears!')
split_chars("Expecto Patronum")
vec = c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels('The quick brown fox jumps over the lazy dog')
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words("sentence! this reverse")
reverse_words("string")
source('code/regex-functions.R')
library(ggplot2)
dat = read.csv('text-emotion.csv', sep = ",")
knitr::opts_chunk$set(echo = TRUE, fig.path = "images/")
source('code/archive-functions.R')
getwd()
setwd(../)
setwd('../')
getwd()
knitr::opts_chunk$set(echo = TRUE, fig.path = "images/")
source('code/archive-functions.R')
setwd('hw04')
knitr::opts_chunk$set(echo = TRUE, fig.path = "images/")
source('code/archive-functions.R')
knitr::opts_chunk$set(echo = TRUE, fig.path = "images/")
source('../code/archive-functions.R')
write.csv(clean_data, "../data/stringr-archive.csv")
library(XML)
library(stringr)
library(ggplot2)
read_archive = function(x) {
url = paste0("http://cran.r-project.org/src/contrib/Archive/", x)
readHTMLTable(url)
}
version_sizes = function(x) {
x = as.character(x)
y = c(rep(0, length(x)))
for (i in 1:length(x)) {
if (!is.na(str_extract(x[i], "K"))) {
y[i] = as.numeric(substr(x[i], 1, nchar(x[i]) - 1))
} else {
y[i] = as.numeric(substr(x[i], 1, nchar(x[i]) - 1)) * 1000
}
}
y
}
clean_archive = function(x) {
x = as.data.frame(x)[]
y = x[-c(1, 2, (nrow(x))), ]
a = data.frame(
name = str_extract(y[[2]], "[a-z]+"),
version = str_extract(y[[2]], "[0-9]+.[0-9]{1,2}+.[0-9]{1,2}|[0-9]+.[0-9]{1,2}"),
date = as.Date(str_extract(y[[3]], "[0-9]{4}+-[0-9]{2}+-[0-9]{2}")),
size =  version_sizes(y[[4]])
)
a
}
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
write.csv(clean_data, "../data/stringr-archive.csv")
plot_archive = function(archive) {
return(ggplot() +
geom_step(aes(x = archive$date, y = archive$size)) +
ggtitle(paste0(archive$name[1], ": timeline of version sizes")))
}
plot_archive(clean_data)
knitr::opts_chunk$set(echo = TRUE, fig.path = "../images/")
source('../code/archive-functions.R')
library(ggplot2)
library(stringr)
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
plot_archive(clean_data)
#ggplot2
raw_gg = read_archive('ggplot2')
clean_gg = clean_archive(raw_gg)
write.csv(clean_gg, "../data/ggplot2-archive.csv")
#XML
raw_xml = read_archive('XML')
clean_xml = clean_archive(raw_xml)
write.csv(clean_xml, "../data/XML-archive.csv")
#knitr
raw_knitr = read_archive('knitr')
clean_knitr = clean_archive(raw_knitr)
write.csv(clean_knitr, "../data/knitr-archive.csv")
#dplyr
raw_dplyr = read_archive('dplyr')
clean_dplyr = clean_archive(raw_dplyr)
write.csv(clean_dplyr, "../data/dplyr-archive.csv")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes")
all_together = rbind(clean_dplyr, clean_gg, clean_knitr, clean_xml)
ggplot(all_together) + geom_step(aes(x = date, y = size, col = name)) + facet_wrap(~name, scales = "free")
source('../code/regex-functions.R')
split_chars('Go Bears!')
split_chars("Expecto Patronum")
vec = c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels('The quick brown fox jumps over the lazy dog')
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words("sentence! this reverse")
reverse_words("string")
source('code/regex-functions.R')
knitr::opts_chunk$set(echo = TRUE, fig.path = "../images/")
source('../code/archive-functions.R')
library(ggplot2)
library(stringr)
raw_data = read_archive('stringr')
clean_data = clean_archive(raw_data)
plot_archive(clean_data)
#ggplot2
raw_gg = read_archive('ggplot2')
clean_gg = clean_archive(raw_gg)
write.csv(clean_gg, "../data/ggplot2-archive.csv")
#XML
raw_xml = read_archive('XML')
clean_xml = clean_archive(raw_xml)
write.csv(clean_xml, "../data/XML-archive.csv")
#knitr
raw_knitr = read_archive('knitr')
clean_knitr = clean_archive(raw_knitr)
write.csv(clean_knitr, "../data/knitr-archive.csv")
#dplyr
raw_dplyr = read_archive('dplyr')
clean_dplyr = clean_archive(raw_dplyr)
write.csv(clean_dplyr, "../data/dplyr-archive.csv")
ggplot() +
geom_step(aes(x = clean_dplyr$date, y = clean_dplyr$size, col = 'dplyr')) +
geom_step(aes(x = clean_knitr$date, y = clean_knitr$size, col = 'knitr')) +
geom_step(aes(x = clean_gg$date, y = clean_gg$size, col = 'ggplot2')) +
geom_step(aes(x = clean_xml$date, y = clean_xml$size, col = 'XML')) +
xlab("date") +
ylab("Size (Kilometers)") +
ggtitle("Packages and their sizes")
all_together = rbind(clean_dplyr, clean_gg, clean_knitr, clean_xml)
ggplot(all_together) + geom_step(aes(x = date, y = size, col = name)) + facet_wrap(~name, scales = "free")
source('../code/regex-functions.R')
split_chars('Go Bears!')
split_chars("Expecto Patronum")
vec = c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels('The quick brown fox jumps over the lazy dog')
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words("sentence! this reverse")
reverse_words("string")
source('../code/regex-functions.R')
library(ggplot2)
dat = read.csv('../data/text-emotion.csv', sep = ",")
library(ggplot2)
content = as.character(dat$content)
nums = nchar(content)
summary(nums)
ggplot() +
geom_histogram(aes(x = nums), binwidth = 5) +
ggtitle("Number of characters in tweets")
ats = c(rep(0, length(content)))
for (i in 1:length(content)) {
ats[i] = str_extract_all(content[i], "@+[0-9,a-z,A-Z,_]{1,15}")
}
mentions = as.integer(summary(ats)[,1])
table(mentions)
ggplot() +
geom_bar(aes(x = mentions), width = 1) +
ggtitle("Mentions in each tweet")
content[mentions == 10]
hashes = c(rep(0, length(content)))
for (i in 1:length(content)) {
hashes[i] = str_extract_all(content[i], "#+[a-z,A-Z]{1}+[a-z,A-Z,0-9]{0,15}")
}
hash_counts = c(as.integer(summary(hashes)[,1]), 1:9)
tab_hash = table(hash_counts) - 1
ggplot() +
geom_bar(aes(x = hash_counts)) +
ggtitle("Number of hashtags")
tags = unlist(hashes)
tags_without_hash = gsub("#", "", tags)
hash_lengths = nchar(tags_without_hash)
mean(hash_lengths)
table(hash_lengths)
