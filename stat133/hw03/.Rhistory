bin_distribution(5, 0.5)
#' @title bin probability
#' @description finds probability in a binomial distributions
#' @param trials is number of trials
#' @param success is number of successes
#' @param prob is probability of success
#' @return probability of # successes in # trials
bin_probability = function(trials, success, prob) {
if (!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Trials and successes must be nonnegative integers")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
return(bin_combinations(trials, success) * (prob^(success)) * (prob^(trials - success)))
}
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = rep(0, trials + 1)
probability = rep(0, trials + 1)
for (i in 1:trials + 1) {
success[i] = i - 1
probability[i] = bin_probability(trials, i - 1, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
bin_probability(5, 0, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = rep(0, trials + 1)
probability = rep(0, trials + 1)
for (i in 1:trials + 1) {
success[i] = i - 1
probability[i] = bin_probability(trials, (i - 1), prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
# -----------------------------------------------------------------------------
# Title: Binomial Functions
# Description: This script creates several functions useful for creating the
#                 binomial probability function.
# Author(s): Ian Driscoll
# Date: 3-23-2018
# -----------------------------------------------------------------------------
#' @title is integer
#' @description checks if x is an integer
#' @param x is any number
#' @return TRUE or FALSE
is_integer = function(x) {
return(x %% 1 == 0)
}
#' @title is positive
#' @description check if x is positive
#' @param x is any number
#' @return TRUE or FALSE
is_positive = function(x) {
return(x > 0)
}
#' @title is nonnegative
#' @description check if x is nonnegative
#' @param x is any number
#' @return TRUE or FALSE
is_nonnegative = function(x) {
return(x >= 0)
}
#' @title is positive integer
#' @description check if x is positive integer
#' @param x is any number
#' @return TRUE or FALSE
is_positive_integer = function(x) {
return(x > 0 & is_integer(x))
}
#' @title is nonneg integer
#' @description check if x is nonneg integer
#' @param x is any number
#' @return TRUE or FALSE
is_nonneg_integer = function(x) {
return(x >= 0 & is_integer(x))
}
#' @title is pprobability
#' @description check if x is a valid probability
#' @param x is any number
#' @return TRUE or FALSE
is_probability = function(x) {
return(x >= 0 & x <= 1)
}
#' @title bin factorial
#' @description finds the factorial of a nonnegative integer
#' @param x is any number
#' @return factorial of x
bin_factorial = function(x) {
result = 1
if (x == 0) {
return(result)
}
for (i in 1:x) {
result = result * i
}
return(result)
}
#' @title bin combinations
#' @description finds binomial combinations of numbers n choosing k
#' @param n is number of options
#' @param k is number of choices
#' @return number of combinations
bin_combinations = function(n, k) {
return((bin_factorial(n)) / (bin_factorial(k) * bin_factorial(n - k)))
}
#' @title bin probability
#' @description finds probability in a binomial distributions
#' @param trials is number of trials
#' @param success is number of successes
#' @param prob is probability of success
#' @return probability of # successes in # trials
bin_probability = function(trials, success, prob) {
if (!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Trials and successes must be nonnegative integers")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
return(bin_combinations(trials, success) * (prob^(success)) * (prob^(trials - success)))
}
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = rep(0, trials + 1)
probability = rep(0, trials + 1)
for (i in 1:trials + 1) {
success[i] = i - 1
probability[i] = bin_probability(trials, (i - 1), prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
1:6
0:6
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = rep(0, trials + 1)
probability = rep(0, trials + 1)
for (i in 0:trials) {
success[i] = i
probability[i] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i] = bin_probability(trials, i-1, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
success = 0:trials
probability = rep(0, trials + 1)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i] = bin_probability(trials, success[i], prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
success = 0:trials
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
print(i)
probability[i] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
print(i)
probability[i + 1] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
bin_distribution(10, .25)
sum(bin_distribution(5, 0.5)[2]
sum(bin_distribution(5, 0.5)[,2]
x = bin_distribution(10, 0.7)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i + 1] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
sum(bin_distribution(5, 0.5)[,2]
x = bin_distribution(10, 0.7)
x = bin_distribution(10, 0.7)
View(x)
bin_distribution(10, 0.7)
bin_probability(10, 5, 0.7)
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i + 1] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
#' @title bin probability
#' @description finds probability in a binomial distributions
#' @param trials is number of trials
#' @param success is number of successes
#' @param prob is probability of success
#' @return probability of # successes in # trials
bin_probability = function(trials, success, prob) {
if (!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Trials and successes must be nonnegative integers")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
return(bin_combinations(trials, success) * (prob^(success)) * ((prob)^(trials - success)))
}
bin_probability(10, 5, 0.7)
bin_combinations(10, 5)
stop("Trials and successes must be nonnegative integers")
#' @title bin probability
#' @description finds probability in a binomial distributions
#' @param trials is number of trials
#' @param success is number of successes
#' @param prob is probability of success
#' @return probability of # successes in # trials
bin_probability = function(trials, success, prob) {
if (!is_nonneg_integer(trials) | !is_nonneg_integer(success)) {
stop("Trials and successes must be nonnegative integers")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
return(bin_combinations(trials, success) * (prob^(success)) * ((1 - prob)^(trials - success)))
}
#' @title bin distribution
#' @description finds distribution of a binomial
#' @param trials is number of trials
#' @param prob is probability of success
#' @return data frame of distribution
bin_distribution = function(trials, prob) {
if (!is_nonneg_integer(trials)) {
stop("Trials must be a nonnegative integer")
}
else if (!is_probability(prob)) {
stop("Probability must be valid probability")
}
success = 0:trials
probability = rep(0, trials + 1)
for (i in success) {
probability[i + 1] = bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(5, 0.5)
bin_distribution(10, 0.7)
source('/code/binomial-functions.R')
getwd()
source('code/binomial-functions.R')
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
source('code/binomial-functions.R')
# probability of geting 3 sixes in 10 rolls
bin_probability(10, 3, (1/6))
# prob of number of sixes with loaded die in 10 rolls
bin_distribution(10, 0.25)
library(ggplot2)
ggplot(data = x) + geom_point()
# prob plot of number of sixes with loaded die in 10 rolls
x = bin_distribution(10, 0.25)
ggplot(data = x) + geom_point()
ggplot(data = x) + geom_point(aes(x = x[1], y = x[2]))
ggplot() + geom_point(aes(x = x$success, y = x$probability))
ggplot() + geom_point(aes(x = x$success, y = x$probability, main = "Number of 6s in 10 Rolls probs")) + gglabel
# prob plot of number of sixes with loaded die in 10 rolls
x = bin_distribution(10, 0.25)
ggplot() + geom_point(aes(x = x$success, y = x$probability, main = "Number of 6s in 10 Rolls probs"))
ggplot() + geom_point(aes(x = x$success, y = x$probability))
4:5
# probability of more than 3 heads in 5 tosses with biased coin of p = 0.35
prob = 0
for (i in 4:5) {
prob = prob + bin_probability(5, i, 0.35)
}
prob
# probability of more than 3 heads in 5 tosses with biased coin of p = 0.35
prob = 0
for (i in 4:5) {
print(i)
prob = prob + bin_probability(5, i, 0.35)
}
for (i in 4:5) {
print(i)
prob = prob + bin_probability(5, i, 0.35)
}
# probability of more than 3 heads in 5 tosses with biased coin of p = 0.35
prob = 0
for (i in 4:5) {
print(i)
prob = prob + bin_probability(5, i, 0.35)
}
# probability of more than 3 heads in 5 tosses with biased coin of p = 0.35
prob = 0
for (i in 4:5) {
prob = prob + bin_probability(5, i, 0.35)
}
prob
# distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads
y = bin_distribution(15, 0.35)
# prob plot of number of sixes with loaded die in 10 rolls
x = bin_distribution(10, 0.25)
ggplot() + geom_point(aes(x = x$success, y = x$probability)) + ggtitle("Probability of # Sixes in 10 rolls with p = 0.25")
ggplot() + geom_point(aes(x = x$success, y = x$probability)) + ggtitle("Probability of # Sixes in 10 rolls with p = 0.25")
# probability of more than 3 heads in 5 tosses with biased coin of p = 0.35 of heads
prob = 0
for (i in 4:5) {
prob = prob + bin_probability(5, i, 0.35)
}
prob
# distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads
y = bin_distribution(15, 0.35)
# distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads
y = bin_distribution(15, 0.35)
ggplot() + geom_point(aes(x = y$success, y = y$probability))
# distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads
y = bin_distribution(15, 0.35)
ggplot() + geom_point(aes(x = y$success, y = y$probability)) + ggtitle("Distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads")
# distribution of # heads in 15 tosses of loaded coin with p = 0.35 of heads
y = bin_distribution(15, 0.35)
ggplot() + geom_point(aes(x = y$success, y = y$probability)) + ggtitle("Distr. of # heads in 15 tosses of loaded coin with p = 0.35 of heads")
# prob plot of number of sixes with loaded die in 10 rolls
x = bin_distribution(10, 0.25)
ggplot() + geom_point(aes(x = x$success, y = x$probability)) + ggtitle("Probability of # Sixes in 10 rolls with p = 0.25")
